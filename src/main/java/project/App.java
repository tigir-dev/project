/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package project;

import java.util.ArrayList;
import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;


public class App {
    public static int search(ArrayList<Integer> list,int lowBound,int insideBounds,int highBound){
        if(list==null){
            throw new IllegalArgumentException();
        }
        else if(lowBound>highBound){
            return -1;
        }
        else if(list.size()==0){
            return -1;
        }
        int count=0;
        for (int integer : list) {
            if(integer>=lowBound && integer<=highBound)
                count++;
        }
        if(insideBounds==1)
            return count;
        else
            return list.size()-count;
    }
    public String getGreeting() {
        return "Hello world.";
    }
    public static void main(String[] args) {
        port(getHerokuAssignedPort());

        get("/", (req, res) -> "Hello, World");

        post("/compute", (req, res) -> {
          //System.out.println(req.queryParams("input1"));
          //System.out.println(req.queryParams("input2"));

          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();


          String input2 = req.queryParams("input2");
          sc1 = new java.util.Scanner(input2);
          sc1.useDelimiter("[;\r\n]+");
          int[] inputs = new int[3];
          int i=0;
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputs[i++]=value;
          }
          sc1.close();
          
          int result = App.search(inputList, inputs[0],inputs[1],inputs[2]);

          Map<String, Integer> map = new HashMap<String, Integer>();
          map.put("result", result);
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }
}

